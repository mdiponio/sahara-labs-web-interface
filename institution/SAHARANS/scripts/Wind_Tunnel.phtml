<?php

/**
 * Wind Tunnel web interface.
 */

$this->headScript()->appendFile($this->baseUrl('webui/webui.js'));
$this->headLink()->appendStylesheet($this->baseUrl('webui/webui.css'));
$this->headLink()->appendStylesheet($this->baseUrl('webui/webui-flat.css'));
$this->headLink()->appendStylesheet($this->baseUrl('uts/windtunnel/windtunnel.css'));

/* Canvas compatability implementation for Internet Explorer 8 and earlier. */
$this->headScript()->appendFile($this->baseUrl('js/excanvas.js'),
        'text/javascript',
        array('conditional' => 'lt IE 9')
);
?>

<div id="wind-tunnel-label" style='position:absolute;top:-27px;left:100px;text-align:center;color:red'>
	Supergroup A - Turbine Installed until 9:45am 15/10/14
</div>
<div id="wind-tunnel-anchor">
    <!-- Interface goes here! -->
</div>


<script type="text/javascript">
$(document).ready(function() {
    new WebUIApp({
        anchor: "#wind-tunnel-anchor",
        windowToggle: true,
        controller: "WindTunnelController",
        dataAction: "dataAndGraph",
        theme: Globals.THEME.flat	,
        cookie: "windtunnel",
        dataPeriod: 500,
        pollPeriod: 2000,
        height: 1750,
        widgets: [
            new Container("camera-containers", {
                title: "Cameras",
                resizable: true,
                preserveAspectRatio: true,
                draggable: true,
                shadable: true,
                closeable: true,
                widgets: [
                    new CameraStream("camera-1", {
                        title: "Camera 1",
                        swfParam: "camera-swf-c1",
                        mjpegParam: "camera-mjpeg-c1",
                        webmParam: "camera-webm-c1",
                        videoWidth: 640,
                        videoHeight: 360
                    }),
                    new CameraStream("camera-2", {
                        title: "Camera 2",
                        swfParam: "camera-swf-c2",
                        mjpegParam: "camera-mjpeg-c2",
                        webmParam: "camera-webm-c2",
                        videoWidth: 640,
                        videoHeight: 360
                    }),
                ],
                layout: new TabLayout({
                }),
                left: 0,
                top: 5,
            }),
            new DataLogging("data-logging", {
                left: -193,
                top: 144,
				height: 370,
            }),
            new Container("container-airvelocity", {
                title: "Air Velocity",
                widgets: [
		            new Graph("graph-airvelocity", {
		                title: "Graph",
		                fields: { "graph-wind-speed": "Air Velocity" },
		                colors: { "graph-wind-speed": "blue" },
		                yLabel: "Air Velocity (m/s)",
		                maxValue: 25,
		                horizScales: 5,
		                width: 355,
		                height: 205,
		                autoCtl: true,
		                traceLabels: false,
		            }),
		            new LCD("lcd-airvelocity", {
			            title: "Digital",
						field: "wind-speed",
						label: "Air Velocity",
						units: "m/s",
						precision: 2
		            }),
		            new Gauge("gauge-airvelocity", {
						title: "Analogue",
						field: "wind-speed",
						units: "m/s",
						max: 25,
						precision: 1,
						scales: 5
		            })
	            ],
	            layout: new TabLayout({
					position: TabLayout.POSITION.top,
					border: 5
	            }),
	            top: 530,
                left: 0,
            }),
            new Container("container-temphumid", {
                title: "Temp. / Relative Humidity",
                widgets: [
		            new Graph("graph-temphumid", {
		                title: "Graph",
		                fields: {
		                    "graph-exhaust-temp": "Temperature (&deg;C)",
		                    "graph-relative-humidity": "Humidity (%)"
		                },
		                colors: {
		                    "graph-exhaust-temp": "yellow",
		                    "graph-relative-humidity": "green",
		                },
		                yLabel: "Temp / Humidity",
		                horizScales: 5,
		                width: 355,
		                height: 205,
		                autoCtl: true,
		                fieldCtl: true
		            }),
		            new Container("digital-temphumid", {
				     	title: "Digital",
				        widgets: [
							new LCD("lcd-temp", {
								field: "air-temperature",
								label: "Air Temperature",
								units: "&deg;C",
								precision: 2
							}),
							new LCD("lcd-humidity", {
								field: "relative-humidity",
								label: "Relative Humidity",
								units: "%",
								precision: 2
							}),
						],
						layout: new BoxLayout({
							vertical: false,
						}),
		            }),
		            new Container("analogue-temphumid", {
				     	title: "Analogue",
				        widgets: [
							new Gauge("gauge-temp", {
								field: "air-temperature",
								label: "Air Pressure",
								units: "&deg;C",
								precision: 1,
								scales: 5
							}),
							new Gauge("gauge-humidity", {
								field: "relative-humidity",
								label: "Relative Humidity",
								units: "%",
								precision: 1,
								scales: 5
							}),
						],
						layout: new BoxLayout({
							vertical: false,
							padding: 0,
							align: BoxLayout.ALIGN.center
						}),
		            }),
		        ],
		        layout: new TabLayout({
			        position: TabLayout.POSITION.top,
			        border: 5
		        }),
		        top: 530,
		        left: 389,
            }),
            new Container("container-diffpressure", {
                title: "Differential Pressure",
                widgets: [
		            new Graph("graph-diffpressure", {
		                title: "Graph",
		                fields: { "graph-diff-pressure": "Differential Pressure" },
		                colors: { "graph-diff-pressure": "red" },
		                yLabel: "Differential Pressure (Pa)",
		                maxValue: 500,
		                horizScales: 5,
		                width: 355,
		                height: 207,
		                autoCtl: true,
		                traceLabels: false,
		            }),
		            new LCD("lcd-diffpressure", {
			            title: "Digital",
						field: "differential-pressure",
						label: "Differential Pressure",
						units: "Pa",
						precision: 1
		            }),
		            new Gauge("gauge-diffpressure", {
						title: "Analogue",
						field: "differential-pressure",
						units: "Pa",
						max: 500,
						precision: 1,
						scales: 5
		            })
		         ],
		         layout: new TabLayout({
					position: TabLayout.POSITION.top,
					border: 5
	             }),
	             left: 0,
	             top: 840,
            }),
            new Container("container-baropressure", {
                title: "Barometric Pressure",
                widgets: [
		            new Graph("graph-baropressure", {
		                title: "Graph",
		                fields: { "graph-barometric-pressure": "Barometric Pressure" },
		                colors: { "graph-barometric-pressure": "orange" },
		                yLabel: "Barometric Pressure (Pa)",
		                minValue: 900,
		                maxValue: 1100,
		                horizScales: 5,
		                width: 355,
		                height: 207,
		                autoCtl: true,
		                traceLabels: false,
		            }),
		             new LCD("lcd-baropressure", {
			            title: "Digital",
						field: "barometric-pressure",
						label: "Barometric Pressure",
						units: "Pa",
						precision: 0
		            }),
		            new Gauge("gauge-baropressure", {
						title: "Analogue",
						field: "barometric-pressure",
						units: "Pa",
						min: 900,
						max: 1100,
						precision: 0,
						scales: 5
		            })
		         ],
		         layout: new TabLayout({
					position: TabLayout.POSITION.top,
					border: 5
	             }),
	             left: 389,
	            top: 840,
            }),
            new Container("container-controllers-fan", {
                title: "Fan",
                draggable: true,
                shadable: true,
                closeable: true,
                expandable: false,
                resizable: false,
                widgets: [
                     new Switch("button-motor", {
                         action: "setMotor",
                         field: "motor-enable",
                         label: "Fan On",
                     }),
                     new Slider("slider-motor", {
                         action: "setMotor",
                         field: "motor-speed",
                         label: "Fan",
                         units: "%",
                         length: 407,
                     }),
                ],
                layout: new BoxLayout({
                    vertical: true,
                    align: BoxLayout.ALIGN.center,
                    padding: 25
                }),
                left: -193,
                top: 530,
            }),
	        new Container("container-controllers-load", {
	            title: "Load",
                draggable: true,
                shadable: true,
                closeable: true,
                expandable: false,
                resizable: false,
                widgets: [
                    new Switch("switch-load-enable", {
						field: "load-enable",
						action: "setLoad",
						label: "Load On"
                    }),
	                s = new Slider("slider-load", {
	                    action: "setLoad",
	                    field: "load-val",
	                    label: "Load",
	                    units: "A",
	                    max: 1,
	                    precision: 3,
	                    vertical: true,
						length: 164,
						scales: 5,
						consumeEvt: function(data) {
							if (!(data["load-mode-ord"] === undefined || this.loadMode == data["load-mode-ord"]))
							{
								switch (data["load-mode-ord"])
								{
								case 0: // Constant current.
									this.config.max = 1;
									this.config.units = "A";
									this.config.precision = 3;
									break;

								case 1: // Constant voltage.
									this.config.max = 65;
									this.config.units = "V";
									this.config.precision = 1;
									break;

								case 2: // Constant Power.
									this.config.max = 20;
									this.config.units = "W";
									this.config.precision = 2;
									break;

								case 3: // Constant Resistance.
									this.config.max = 2;
									this.config.units = "k&#8486;";
									this.config.precision = 3;
									break;

								default:
									alert("Unknown load mode!!!");
								}


								var $c = this.$widget.parent(),
									l = this.getWindowProperty("left"), t = this.getWindowProperty("top");
								this.destroy();
								this.init($c);
								this.$widget.css({
									left: l,
									top: t
								});

								this.loadMode = data["load-mode-ord"];
							}
						 }
	                }),
	                l = new SelectionList("selection-load-mode", {
	                    action: "setLoad",
	                    field: "load-mode-ord",
	                    label: "Load Constant:",
	                    values: [ "Current",
	                              "Voltage",
	                              "Power",
	                              "Resistance" ],
	                    selectionWidth: 100,
						width: 110,
	                    consumeEvt: function(data) {
	                        s.consume(data);
	                    }
	                }),
	                new Button("button-load-reset", {
						action: "setLoad",
						params: { "load-reset": true },
						label: "Reset",
						width: 110
	                }),
				],
                layout: new BoxLayout({
                    vertical: true,
                    align: BoxLayout.ALIGN.center,
                    padding: 25
                }),
                left: -192,
                top: 1155,
            }),
            new Container("container-load-data", {
                title: "Load Controller",
                widgets: [
					new Graph("graph-load-controller", {
						title: "Graph",
						fields: {
							"graph-load-volts": "Voltage (V)",
							"graph-load-amps":  "Current (A)",
							"graph-load-watts": "Power (W)",
							"graph-load-ohms": "Resistance (k&#8486;)"
						},
						multipliers: {
							"graph-load-ohms": 50,
							"graph-load-amps": 50
						},
						yLabel: "Voltage (V) / Power (W)",
						yRightLabel: "Current (A) / Resistance (k&#8486;)",
						yScaling: 0.02,
						autoCtl: true,
						fieldCtl: true,
						width: 743,
						height: 410,
					}),
					new Container("digital-load-controller", {
						title: "Digital",
						widgets: [
							new LCD("lcd-load-volts", {
								field: "load-volts",
								label: "Voltage",
								units: "V",
								precision: 2
							}),
							new LCD("lcd-load-amps", {
								field: "load-amps",
								label: "Current",
								units: "A",
								precision: 3
							}),
							new LCD("lcd-load-watts", {
								field: "load-watts",
								label: "Power",
								units: "W",
								precision: 2
							}),
							new LCD("lcd-load-ohms", {
								field: "load-ohms",
								label: "Resistance",
								units: "k&#8486;",
								precision: 3
							}),
						],
						layout: new BoxLayout({
							vertical: false,
						}),
					}),
					new Container("analogue-load-controller", {
						title: "Analogue",
						widgets: [
							new Gauge("gauge-load-volts", {
								field: "load-volts",
								label: "Voltage",
								units: "V",
								precision: 2,
								max: 65,
							}),
							new Gauge("gauge-load-amps", {
								field: "load-amps",
								label: "Current",
								units: "A",
								precision: 3,
								max: 1
							}),
							new Gauge("gauge-load-watts", {
								field: "load-watts",
								label: "Power",
								units: "W",
								precision: 2,
								max: 20,
							}),
							new Gauge("gauge-load-ohms", {
								field: "load-ohms",
								label: "Resistance",
								units: "k&#8486;",
								precision: 3,
								max: 2
							}),
						],
						layout: new BoxLayout({
							vertical: false,
						}),
					}),
				],
				layout: new TabLayout({
					position: TabLayout.POSITION.top,
					border: 5
	            }),
	            top: 1155,
                left: 0,
            }),
        ]
    }).setup().run();
});
</script>
