<?php

/**
 * Wind Tunnel web interface.
 */

$this->headScript()->appendFile($this->baseUrl('webui/webui.js'));
$this->headLink()->appendStylesheet($this->baseUrl('webui/webui.css'));
$this->headLink()->appendStylesheet($this->baseUrl('webui/webui-flat.css'));
$this->headLink()->appendStylesheet($this->baseUrl('uts/windtunnel/windtunnel.css'));

/* Canvas compatability implementation for Internet Explorer 8 and earlier. */
$this->headScript()->appendFile($this->baseUrl('js/excanvas.js'),
        'text/javascript',
        array('conditional' => 'lt IE 9')
);
?>

<div id="wind-tunnel-anchor">
    <!-- Interface goes here! -->
</div>


<script type="text/javascript">
$(document).ready(function() {
    new WebUIApp({
        anchor: "#wind-tunnel-anchor",
        windowToggle: true,
        controller: "WindTunnelController",
        dataAction: "dataAndGraph",
        theme: Globals.THEME.flat	,
        cookie: "windtunnel",
        dataPeriod: 500,
        height: 1850,
        widgets: [
            new Container("camera-containers", {
                title: "Cameras",
                resizable: true,
                preserveAspectRatio: true,
                draggable: true,
                shadable: true,
                closeable: true,
                widgets: [
                    new CameraStream("camera-1", {
                        title: "Camera 1",
                        swfParam: "camera-swf-c1",
                        mjpegParam: "camera-mjpeg-c1",
                        videoWidth: 640,
                        videoHeight: 360
                    }),
                    new CameraStream("camera-2", {
                        title: "Camera 2",
                        swfParam: "camera-swf-c2",
                        mjpegParam: "camera-mjpeg-c2",
                        videoWidth: 640,
                        videoHeight: 360
                    }),
                ],
                layout: new TabLayout({
                }),
                left: 0,
                top: 5,
            }),
            new DataLogging("data-logging", {
                left: -193,
                top: 144,
            }),
            new Graph("graph-airvelocity", {
                title: "Air Velocity",
                fields: { "graph-wind-speed": "Air Velocity" },
                colors: { "graph-wind-speed": "blue" },
                yLabel: "Air Velocity (m/s)",
                maxValue: 25,
                horizScales: 5,
                top: 550,
                left: 0,
                width: 330,
                autoCtl: true,
                traceLabels: false,
            }),
            new Graph("graph-temphumid", {
                title: "Temp. / Relative Humidity",
                fields: {
                    "graph-exhaust-temp": "Temperature (&deg;C)",
                    "graph-relative-humidity": "Humidity (%)"
                },
                colors: {
                    "graph-exhaust-temp": "yellow",
                    "graph-relative-humidity": "green",
                },
                yLabel: "Temp / Humidity",
                horizScales: 5,
                top: 550,
                left: 340,
                width: 330,
                autoCtl: true,
                fieldCtl: true
            }),
            new Graph("graph-diffpressure", {
                title: "Differential Pressure",
                fields: { "graph-diff-pressure": "Differential Pressure" },
                colors: { "graph-diff-pressure": "red" },
                yLabel: "Differential Pressure (Pa)",
                maxValue: 500,
                horizScales: 5,
                top: 860,
                left: 0,
                width: 330,
                autoCtl: true,
                traceLabels: false,
            }),
            new Graph("graph-baropressure", {
                title: "Barometric Pressure",
                fields: { "graph-barometric-pressure": "Barometric Pressure" },
                colors: { "graph-barometric-pressure": "orange" },
                yLabel: "Barometric Pressure (Pa)",
                minValue: 900,
                maxValue: 1100,
                horizScales: 5,
                top: 860,
                left: 340,
                width: 330,
                autoCtl: true,
                traceLabels: false,
            }),
            new Container("container-controllers-fan", {
                title: "Fan",
                draggable: true,
                shadable: true,
                closeable: true,
                expandable: false,
                resizable: false,
                widgets: [
                     new Switch("button-motor", {
                         action: "setMotor",
                         field: "motor-enable",
                         label: "Fan On",
                     }),
                     new Slider("slider-motor", {
                         action: "setMotor",
                         field: "motor-speed",
                         label: "Fan",
                         units: "%",
                     }),
                ],
                layout: new BoxLayout({
                    vertical: true,
                    align: "center"
                }),
                left: -163,
                top: 550,
            }),
	        new Container("container-controllers-load", {
	            title: "Load Controller",
                draggable: true,
                shadable: true,
                closeable: true,
                expandable: false,
                resizable: false,
                widgets: [
                    new Switch("switch-load-enable", {
						field: "load-enable",
						action: "setLoad",
						label: "Load On"
                    }),
	                s = new Slider("slider-load", {
	                    action: "setLoad",
	                    field: "load-val",
	                    label: "Load",
	                    units: "A",
	                    max: 1,
	                    precision: 3,
	                    vertical: false,
						 length: 134,
						 scales: 1,
						 consumeEvt: function(data) {
							if (!(data["load-mode-ord"] === undefined || this.loadMode == data["load-mode-ord"]))
							{
								switch (data["load-mode-ord"])
								{
								case 0: // Constant current.
									this.config.max = 1;
									this.config.units = "A";
									this.config.precision = 3;
									break;

								case 1: // Constant voltage.
									this.config.max = 65;
									this.config.units = "V";
									this.config.precision = 1;
									break;

								case 2: // Constant Power.
									this.config.max = 20;
									this.config.units = "W";
									this.config.precision = 2;
									break;

								case 3: // Constant Resistance.
									this.config.max = 2000;
									this.config.units = "&#8486;";
									this.config.precision = 1;
									break;

								default:
									alert("Unknown load mode!!!");
								}


								var $c = this.$widget.parent(),
									l = this.getWindowProperty("left"), t = this.getWindowProperty("top");
								this.destroy();
								this.init($c);
								this.$widget.css({
									left: l,
									top: t
								});

								this.loadMode = data["load-mode-ord"];
							}
						 }
	                }),
	                l = new SelectionList("selection-load-mode", {
	                    action: "setLoad",
	                    field: "load-mode-ord",
	                    label: "Load Constant:",
	                    values: [ "Current",
	                              "Voltage",
	                              "Power",
	                              "Resistance" ],
	                    selectionWidth: 100,
						width: 110,
	                    consumeEvt: function(data) {
	                        s.consume(data);
	                    }
	                }),
	                new Button("button-load-reset", {
						action: "setLoad",
						params: { "load-reset": true },
						label: "Reset",
						width: 110
	                }),
				],
                layout: new BoxLayout({
                    vertical: true,
                    align: BoxLayout.ALIGN.center
                }),
                left: -192,
                top: 1180,
            }),
			new Graph("graph-load-controller", {
				title: "Load Controller Values",
				fields: {
					"graph-load-volts": "Volts (V)",
					"graph-load-amps":  "Amps (A)",
					"graph-load-watts": "Power (W)",
					"graph-load-ohms": "Resistance (&#8486;)"
				},
				autoCtl: true,
				fieldCtl: true,
				left: 0,
				top: 1180,
				width: 670,
				height: 450
			})
        ]
    }).setup().run();
});
</script>
